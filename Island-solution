class Solution {
    
    int row;
    int col;
    int dir[4][2] = { {1, 0}, {0, 1}, {-1, 0}, {0, -1} };
    
    void dfsUtil(vector<vector<char>>& grid, int i, int j)
    {
        if( (i < 0) || (i >= row) || (j < 0) || (j >= col) || grid[i][j] == '0')
            return;
        
        int xx = 0;
        int yy = 0;
        
        grid[i][j] = '0';
        
        for(int k=0; k<4; k++)
        {
            xx = i + dir[k][0];
            yy = j + dir[k][1];
            
            dfsUtil(grid, xx, yy);
            
        }
        
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        
        row = grid.size();
        col = grid[0].size();
        
        int count = 0;
        
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if( grid[i][j] == '1' )
                {
                    count++;
                    dfsUtil(grid, i, j);
                }
                    
            }
        }
        
        return count;
    }
};
